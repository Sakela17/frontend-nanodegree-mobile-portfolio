var $jscomp=$jscomp||{};$jscomp.scope={};$jscomp.ASSUME_ES5=!1;$jscomp.ASSUME_NO_NATIVE_MAP=!1;$jscomp.ASSUME_NO_NATIVE_SET=!1;$jscomp.defineProperty=$jscomp.ASSUME_ES5||"function"==typeof Object.defineProperties?Object.defineProperty:function(a,c,b){a!=Array.prototype&&a!=Object.prototype&&(a[c]=b.value)};$jscomp.getGlobal=function(a){return"undefined"!=typeof window&&window===a?a:"undefined"!=typeof global&&null!=global?global:a};$jscomp.global=$jscomp.getGlobal(this);
$jscomp.polyfill=function(a,c,b,d){if(c){b=$jscomp.global;a=a.split(".");for(d=0;d<a.length-1;d++){var e=a[d];e in b||(b[e]={});b=b[e]}a=a[a.length-1];d=b[a];c=c(d);c!=d&&null!=c&&$jscomp.defineProperty(b,a,{configurable:!0,writable:!0,value:c})}};$jscomp.polyfill("Array.prototype.fill",function(a){return a?a:function(a,b,d){var c=this.length||0;0>b&&(b=Math.max(0,c+b));if(null==d||d>c)d=c;d=Number(d);0>d&&(d=Math.max(0,c+d));for(b=Number(b||0);b<d;b++)this[b]=a;return this}},"es6-impl","es3");
var test=require("tape"),SafeBuffer=require("./").Buffer;
test("new SafeBuffer(value) works just like Buffer",function(a){a.deepEqual(new SafeBuffer("hey"),new Buffer("hey"));a.deepEqual(new SafeBuffer("hey","utf8"),new Buffer("hey","utf8"));a.deepEqual(new SafeBuffer("686579","hex"),new Buffer("686579","hex"));a.deepEqual(new SafeBuffer([1,2,3]),new Buffer([1,2,3]));a.deepEqual(new SafeBuffer(new Uint8Array([1,2,3])),new Buffer(new Uint8Array([1,2,3])));a.equal(typeof SafeBuffer.isBuffer,"function");a.equal(SafeBuffer.isBuffer(new SafeBuffer("hey")),!0);
a.equal(Buffer.isBuffer(new SafeBuffer("hey")),!0);a.notOk(SafeBuffer.isBuffer({}));a.end()});test("SafeBuffer.from(value) converts to a Buffer",function(a){a.deepEqual(SafeBuffer.from("hey"),new Buffer("hey"));a.deepEqual(SafeBuffer.from("hey","utf8"),new Buffer("hey","utf8"));a.deepEqual(SafeBuffer.from("686579","hex"),new Buffer("686579","hex"));a.deepEqual(SafeBuffer.from([1,2,3]),new Buffer([1,2,3]));a.deepEqual(SafeBuffer.from(new Uint8Array([1,2,3])),new Buffer(new Uint8Array([1,2,3])));a.end()});
test("SafeBuffer.alloc(number) returns zeroed-out memory",function(a){for(var c=0;10>c;c++){var b=new Buffer(1E3);b.fill(0);a.deepEqual(SafeBuffer.alloc(1E3),b);b=new Buffer(1E6);b.fill(0);a.deepEqual(SafeBuffer.alloc(1E6),b)}a.end()});test("SafeBuffer.allocUnsafe(number)",function(a){var c=SafeBuffer.allocUnsafe(100);a.equal(c.length,100);a.equal(SafeBuffer.isBuffer(c),!0);a.equal(Buffer.isBuffer(c),!0);a.end()});
test("SafeBuffer.from() throws with number types",function(a){a.plan(5);a.throws(function(){SafeBuffer.from(0)});a.throws(function(){SafeBuffer.from(-1)});a.throws(function(){SafeBuffer.from(NaN)});a.throws(function(){SafeBuffer.from(Infinity)});a.throws(function(){SafeBuffer.from(99)})});
test("SafeBuffer.allocUnsafe() throws with non-number types",function(a){a.plan(4);a.throws(function(){SafeBuffer.allocUnsafe("hey")});a.throws(function(){SafeBuffer.allocUnsafe("hey","utf8")});a.throws(function(){SafeBuffer.allocUnsafe([1,2,3])});a.throws(function(){SafeBuffer.allocUnsafe({})})});
test("SafeBuffer.alloc() throws with non-number types",function(a){a.plan(4);a.throws(function(){SafeBuffer.alloc("hey")});a.throws(function(){SafeBuffer.alloc("hey","utf8")});a.throws(function(){SafeBuffer.alloc([1,2,3])});a.throws(function(){SafeBuffer.alloc({})})});
