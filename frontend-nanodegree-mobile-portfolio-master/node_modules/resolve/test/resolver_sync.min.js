var path=require("path"),test=require("tape"),resolve=require("../");test("foo",function(a){var b=path.join(__dirname,"resolver");a.equal(resolve.sync("./foo",{basedir:b}),path.join(b,"foo.js"));a.equal(resolve.sync("./foo.js",{basedir:b}),path.join(b,"foo.js"));a.throws(function(){resolve.sync("foo",{basedir:b})});a.end()});test("bar",function(a){var b=path.join(__dirname,"resolver");a.equal(resolve.sync("foo",{basedir:path.join(b,"bar")}),path.join(b,"bar/node_modules/foo/index.js"));a.end()});
test("baz",function(a){var b=path.join(__dirname,"resolver");a.equal(resolve.sync("./baz",{basedir:b}),path.join(b,"baz/quux.js"));a.end()});test("biz",function(a){var b=path.join(__dirname,"resolver/biz/node_modules");a.equal(resolve.sync("./grux",{basedir:b}),path.join(b,"grux/index.js"));a.equal(resolve.sync("tiv",{basedir:path.join(b,"grux")}),path.join(b,"tiv/index.js"));a.equal(resolve.sync("grux",{basedir:path.join(b,"tiv")}),path.join(b,"grux/index.js"));a.end()});
test("normalize",function(a){var b=path.join(__dirname,"resolver/biz/node_modules/grux");a.equal(resolve.sync("../grux",{basedir:b}),path.join(b,"index.js"));a.end()});test("cup",function(a){var b=path.join(__dirname,"resolver");a.equal(resolve.sync("./cup",{basedir:b,extensions:[".js",".coffee"]}),path.join(b,"cup.coffee"));a.equal(resolve.sync("./cup.coffee",{basedir:b}),path.join(b,"cup.coffee"));a.throws(function(){resolve.sync("./cup",{basedir:b,extensions:[".js"]})});a.end()});
test("mug",function(a){var b=path.join(__dirname,"resolver");a.equal(resolve.sync("./mug",{basedir:b}),path.join(b,"mug.js"));a.equal(resolve.sync("./mug",{basedir:b,extensions:[".coffee",".js"]}),path.join(b,"mug.coffee"));a.equal(resolve.sync("./mug",{basedir:b,extensions:[".js",".coffee"]}),path.join(b,"mug.js"));a.end()});
test("other path",function(a){var b=path.join(__dirname,"resolver"),c=path.join(b,"bar"),d=path.join(b,"other_path");a.equal(resolve.sync("root",{basedir:c,paths:[d]}),path.join(b,"other_path/root.js"));a.equal(resolve.sync("lib/other-lib",{basedir:c,paths:[d]}),path.join(b,"other_path/lib/other-lib.js"));a.throws(function(){resolve.sync("root",{basedir:c})});a.throws(function(){resolve.sync("zzz",{basedir:c,paths:[d]})});a.end()});
test("incorrect main",function(a){var b=path.join(__dirname,"resolver"),c=path.join(b,"incorrect_main");a.equal(resolve.sync("./incorrect_main",{basedir:b}),path.join(c,"index.js"));a.end()});test("#25: node modules with the same name as node stdlib modules",function(a){var b=path.join(__dirname,"resolver/punycode");a.equal(resolve.sync("punycode",{basedir:b}),path.join(b,"node_modules/punycode/index.js"));a.end()});
var stubStatSync=function(a){var b=require("fs"),c=b.statSync;try{return b.statSync=function(){throw new EvalError("Unknown Error");},a()}finally{b.statSync=c}};test("#79 - re-throw non ENOENT errors from stat",function(a){var b=path.join(__dirname,"resolver");stubStatSync(function(){a.throws(function(){resolve.sync("foo",{basedir:b})},/Unknown Error/)});a.end()});
test('#52 - incorrectly resolves module-paths like "./someFolder/" when there is a file of the same name',function(a){var b=path.join(__dirname,"resolver");a.equal(resolve.sync("./foo",{basedir:path.join(b,"same_names")}),path.join(b,"same_names/foo.js"));a.equal(resolve.sync("./foo/",{basedir:path.join(b,"same_names")}),path.join(b,"same_names/foo/index.js"));a.end()});
test("sync: #121 - treating an existing file as a dir when no basedir",function(a){var b=path.basename(__filename);a.test("sanity check",function(a){a.equal(resolve.sync("./"+b),__filename,"sanity check");a.end()});a.test("with a fake directory",function(a){function c(){return resolve.sync("./"+b+"/blah")}a.throws(c,"throws an error");try{c()}catch(e){a.equal(e.code,"MODULE_NOT_FOUND","error code matches require.resolve"),a.equal(e.message,"Cannot find module './"+b+"/blah' from '"+__dirname+"'",
"can not find nonexistent module")}a.end()});a.end()});
