var assert=require("assert"),pipe=require(".."),Stream=require("stream");describe("pipe(a)",function(){it("should return a",function(){var b=Readable(),a=pipe(b);assert.equal(a,b)})});
describe("pipe(a, b, c)",function(){it("should pipe internally",function(b){pipe(Readable(),Transform(),Writable(b))});it("should be writable",function(b){b=pipe(Transform(),Writable(b));assert(b.writable);Readable().pipe(b)});it("should be readable",function(b){var a=pipe(Readable(),Transform());assert(a.readable);a.pipe(Writable(b))});it("should be readable and writable",function(b){var a=pipe(Transform(),Transform());assert(a.readable);assert(a.writable);Readable().pipe(a).pipe(Writable(b))});
describe("errors",function(){it("should reemit",function(b){var a=Transform(),e=Transform(),c=Transform(),d=pipe(a,e,c),f=Error(),g=0;d.on("error",function(a){g++;assert.equal(a,f);assert(3>=g);3==g&&b()});a.emit("error",f);e.emit("error",f);c.emit("error",f)});it("should not reemit endlessly",function(b){var a=Transform(),e=Transform(),c=Transform();c.readable=!1;var d=pipe(a,e,c),f=Error(),g=0;d.on("error",function(a){g++;assert.equal(a,f);assert(3>=g);3==g&&b()});a.emit("error",f);e.emit("error",
f);c.emit("error",f)})})});describe("pipe(a, b, c, fn)",function(){it("should call on finish",function(b){var a=!1,e=Readable(),c=Transform(),d=Writable(function(){a=!0});pipe(e,c,d,function(c){assert(!c);assert(a);b()})});it("should call with error once",function(b){var a=Readable(),e=Transform(),c=Writable(),d=Error();pipe(a,e,c,function(a){assert(a);b()});a.emit("error",d);e.emit("error",d);c.emit("error",d)})});
function Readable(){var b=new Stream.Readable({objectMode:!0});b._read=function(){this.push("a");this.push(null)};return b}function Transform(){var b=new Stream.Transform({objectMode:!0});b._transform=function(a,b,c){c(null,a.toUpperCase())};return b}function Writable(b){var a=new Stream.Writable({objectMode:!0});a._write=function(a,c,d){assert.equal(a,"A");d();b()};return a};
